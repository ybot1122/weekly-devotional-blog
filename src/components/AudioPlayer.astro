---
// SimpleAudioPlayer.astro
const label = "OpenAI Text-to-Speech";
const post_id = Astro.props.post_id;
---

<style>
  .audio-player {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: #f4f4f4;
    padding: 0.75rem 1.25rem;
    border-radius: 6px;
  }
  button {
    background: #fff;
    border: 1px solid #bbb;
    border-radius: 50%;
    width: 2.5rem;
    height: 2.5rem;
    font-size: 1.25rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition:
      background 0.2s,
      border 0.2s;
  }
  button:active {
    background: #eee;
    border-color: #888;
  }
</style>

<div class="audio-player">
  <button
    id="audio-play-pause"
    aria-label="Play"
    type="button"
    data-postid={post_id}>▶️</button
  >
  <audio id="audio-element"></audio>
  <span id="label">{label}</span>
  <select id="voice">
    <option value="alloy">Alloy</option>
    <option value="ash">Ash</option>
    <option value="ballad">Ballad</option>
    <option value="coral" selected>Coral</option>
    <option value="echo">Echo</option>
    <option value="fable">Fable</option>
    <option value="onyx">Onyx</option>
    <option value="nova">Nova</option>
    <option value="sage">Sage</option>
    <option value="shimmer">Shimmer</option>
    <option value="verse">Verse</option>
  </select>

  <select id="tone">
    <option value="serious">Serious, solemn</option>
    <option value="upbeat">Upbeat, joyful</option>
    <option value="curious">Inquistive, curious</option>
    <option value="dire">Dire, grave</option>
    <option value="casual" selected>Lighthearted, casual</option>
  </select>
</div>
<script>
  import { actions } from "astro:actions";
  const btn = document.getElementById("audio-play-pause");
  const audio: HTMLAudioElement | null = document.getElementById(
    "audio-element"
  ) as HTMLAudioElement;
  const voiceEl: HTMLSelectElement | null = document.getElementById(
    "voice"
  ) as HTMLSelectElement;
  const toneEl: HTMLSelectElement | null = document.getElementById(
    "tone"
  ) as HTMLSelectElement;

  if (btn && audio && btn.dataset.postid && voiceEl) {
    let playing = false;

    voiceEl.addEventListener("change", () => audio.removeAttribute("src"));
    toneEl.addEventListener("change", () => audio.removeAttribute("src"));

    btn.addEventListener("click", async () => {
      console.log("hi");

      if (!audio.src) {
        const voice: any = voiceEl.value;
        const tone: any = toneEl.value;
        console.log(voice, tone);

        document.getElementById("label")!.innerText = "loading...";

        const playback = await actions.tts.tts({
          post_id: btn.dataset.postid!,
          voice,
          tone,
        });
        console.log(playback);

        // Convert the buffer to a base64 data URI (audio/wav by default)
        let audioSrc = "";
        if (playback.data) {
          audioSrc = `data:audio/wav;base64,${playback.data}`;
          audio.src = audioSrc;
        }

        document.getElementById("label")!.innerText = "OpenAI Text-to-Speech";
      }

      if (playing) {
        audio.pause();
      } else {
        audio.play();
      }
    });

    audio.addEventListener("play", () => {
      playing = true;
      btn.textContent = "⏸️";
      btn.setAttribute("aria-label", "Pause");
    });

    audio.addEventListener("pause", () => {
      playing = false;
      btn.textContent = "▶️";
      btn.setAttribute("aria-label", "Play");
    });

    audio.addEventListener("ended", () => {
      playing = false;
      btn.textContent = "▶️";
      btn.setAttribute("aria-label", "Play");
    });
  }
</script>
